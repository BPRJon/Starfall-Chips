--@name Hoverbike V2
--@author jon b
--@shared

if SERVER then
    --functions
    function KeyPress(ply,key)
        if ply:keyDown(IN_KEY[key]) then return 1
        else return 0 end
         
    end
    --This table will make basic cubes automatically
    local QuickCubes = {
      --{L,W,H,Origin}
        {43,40,20,Vector(-50,0,10)},
        {18,28,21,Vector(-20,0,10)},
        {60,23,18,Vector(70,0,-5)},
        {80,40,14,Vector(0,0,-7)}
    }
    
    --This is where you can input your own verticies 
    local CustomMesh = {
        --[[
        {
            Vector(0,0,0),Vector(0,0,0),Vector(0,0,0),Vector(0,0,0),
            Vector(0,0,0),Vector(0,0,0),Vector(0,0,0),Vector(0,0,0)
        }
        ]]
        {
            Vector(100,11,2),Vector(100,-11,2),Vector(100,11,8),Vector(100,-11,8),
            Vector(15,11,10),Vector(15,-11,10),Vector(15,11,15),Vector(15,-11,15)
        },
        {
            Vector(-70,15,18),Vector(-70,-15,18),Vector(-70,15,0),Vector(-70,-15,0),
            Vector(-95,15,18),Vector(-95,-15,18),Vector(-95,15,15),Vector(-95,-15,15)
        },
        {
            Vector(78,25,5),Vector(75,10,5),Vector(78,25,-5),Vector(75,10,-5),
            Vector(82,25,5),Vector(85,10,5),Vector(82,25,-5),Vector(85,10,-5)
        },
        {
            Vector(78,-25,5),Vector(75,-10,5),Vector(78,-25,-5),Vector(75,-10,-5),
            Vector(82,-25,5),Vector(85,-10,5),Vector(82,-25,-5),Vector(85,-10,-5)
        }
    }
    
    --Table for creating holos
    local HoloTbl = {
        --{pos     ,ang     ,model path                      , scale  ,color                  , mat (optional)}
        --{Vector(),Angle(),"models/balloons/balloon_dog.mdl",Vector(1),Color(255,255,255,255)}
        {Vector(-20,0,10),Angle(-90,180,0),"models/props_c17/FurnitureWashingmachine001a.mdl",Vector(0.8,1,0.5),Color(100,100,100,255),"WTP/metal_3"},
        {Vector(-50,10,10),Angle(0,90,0),"models/props_junk/TrashDumpster01a.mdl",Vector(0.4,0.6,0.4),Color(155,155,155,255),"WTP/metal_5"},
        {Vector(-50,-10,10),Angle(0,-90,0),"models/props_junk/TrashDumpster01a.mdl",Vector(0.4,0.6,0.4),Color(155,155,155,255),"WTP/metal_5"},
        {Vector(0,15,0),Angle(0,90,0),"models/props_trainstation/traincar_rack001.mdl",Vector(0.6),Color(255,255,255,255)},
        {Vector(0,-15,0),Angle(0,-90,0),"models/props_trainstation/traincar_rack001.mdl",Vector(0.6),Color(255,255,255,255)},
        {Vector(-80,0,8),Angle(0,180,0),"models/props_trainstation/mount_connection001a.mdl",Vector(0.5,1,0.5),Color(255,255,255,255)},
        {Vector(0,15,-6),Angle(0,0,-90),"models/props_wasteland/horizontalcoolingtank04.mdl",Vector(0.25,0.15,0.15),Color(150,150,150,255),"WTP/metal_4"},
        {Vector(0,-15,-6),Angle(0,0,90),"models/props_wasteland/horizontalcoolingtank04.mdl",Vector(0.25,0.15,0.15),Color(150,150,150,255),"WTP/metal_4"},
        {Vector(0,0,-6),Angle(0,0,180),"models/props_wasteland/laundry_washer003.mdl",Vector(0.8,0.5,0.4),Color(255,255,255,255)},
        {Vector(75,0,-6),Angle(-90,0,0),"models/props_wasteland/buoy01.mdl",Vector(0.4),Color(255,255,255,255)},
        {Vector(80,-17,0),Angle(0,0,90),"models/props_trainstation/TrackSign02.mdl",Vector(0.5),Color(255,255,255,255)},
        {Vector(80,17,0),Angle(0,0,-90),"models/props_trainstation/TrackSign02.mdl",Vector(0.5),Color(255,255,255,255)},
        {Vector(15,0,10),Angle(-90,90,90),"models/props_combine/combine_window001.mdl",Vector(0.2,0.3,0.5),Color(255,255,255,255)},
        {Vector(50,-2,0),Angle(-90,0,180),"models/props_c17/TrapPropeller_Engine.mdl",Vector(1),Color(255,255,255,255)},
        {Vector(75,-0.6,0),Angle(0,90,0),"models/props_interiors/Radiator01a.mdl",Vector(1,0.5,0.2),Color(255,255,255,255)},
        {Vector(60,-12,-5),Angle(-90,10,0),"models/props_c17/canister01a.mdl",Vector(1),Color(155,100,100,255),"WTP/metal_2c"},
        {Vector(60,12,-5),Angle(-90,-10,0),"models/props_c17/canister02a.mdl",Vector(1),Color(100,100,155,255),"WTP/metal_2c"}
    }
    
    function CreateHitbox(tblQC,tblCM)
        local supertable = {}
        
        for i,v in pairs(tblQC) do
            tbl = {
                Vector(tblQC[i][1]/2,tblQC[i][2]/2,tblQC[i][3]/2)+tblQC[i][4],Vector(-tblQC[i][1]/2,tblQC[i][2]/2,tblQC[i][3]/2)+tblQC[i][4],Vector(tblQC[i][1]/2,-tblQC[i][2]/2,tblQC[i][3]/2)+tblQC[i][4],Vector(-tblQC[i][1]/2,-tblQC[i][2]/2,tblQC[i][3]/2)+tblQC[i][4],
                Vector(tblQC[i][1]/2,tblQC[i][2]/2,-tblQC[i][3]/2)+tblQC[i][4],Vector(-tblQC[i][1]/2,tblQC[i][2]/2,-tblQC[i][3]/2)+tblQC[i][4],Vector(tblQC[i][1]/2,-tblQC[i][2]/2,-tblQC[i][3]/2)+tblQC[i][4],Vector(-tblQC[i][1]/2,-tblQC[i][2]/2,-tblQC[i][3]/2)+tblQC[i][4]
            }
            
            supertable[i] = tbl
        end
        for i,v in pairs(CustomMesh) do
            local _,findTbl = mesh.findConvexHull(v)
            CustomMesh[i] = findTbl
        end
        
        return prop.createCustom(chip():getPos(),Angle(),table.add(supertable,CustomMesh),true)
    end
    
    
    function CreateHolos(ent,tbl)
        holocreate = coroutine.create(function()
            for i,v in pairs(tbl) do
                local holo = hologram.create(tbl[i][1]+ent:getPos(),tbl[i][2]+ent:getAngles(),tbl[i][3],tbl[i][4])
                holo:setParent(ent)
                holo:setColor(tbl[i][5])
                if tbl[i][6] != nil then
                    holo:setMaterial(tbl[i][6])
                end
                if chip():getQuotaUsed() > chip():getQuotaMax()*0.5 then
                    coroutine.wait(1)
                end
            end
            print("Holos Created!")
        end)
    end
    --vars
    ChipPos = chip():getPos()
    Seat = prop.createSeat(ChipPos+Vector(-7,0,-5),Angle(0,-90,0),"models/nova/jalopy_seat.mdl",true)
    Hitbox = CreateHitbox(QuickCubes,CustomMesh)
    HitboxPhys = Hitbox:getPhysicsObject()
    HitboxPhys:enableDrag(0)
    Hitbox:setMass(HitboxPhys:getVolume()/20)
    Seat:setParent(Hitbox)
    Hitbox:setPos(ChipPos+Vector(0,0,50))
    CreateHolos(Hitbox,HoloTbl)
    Hitbox:setColor(Color(0,0,0,0))
    HoverSound = sound.create(Hitbox,"ambient/machines/combine_shield_loop3.wav")
    HoverSound:play()
    EngineSound = sound.create(Hitbox, "npc/manhack/mh_engine_loop2.wav")
    EngineSound:play()
    EngineSound:setVolume(0.5)
    EngineSound:setPitch(50)
    --hooks
    hook.add("ClientInitialized", "data", function(ply)
        net.start("Send")
        net.writeEntity(Seat)
        net.send(ply)
        
    end)
    hook.add("tick","hoverbike tick", function()
        Driver = Seat:getDriver()
        Trace = trace.line(Hitbox:getPos(),Hitbox:getPos()+Vector(0,0,-100):getRotated(Hitbox:getAngles()),{Hitbox,Seat})
        if Driver:isValid() then
            DriverEyeAng = Hitbox:worldToLocalAngles(Driver:getEyeAngles()+Angle(0,90,0))
            W = KeyPress(Driver,"FORWARD")
            S = KeyPress(Driver,"BACK")
            A = KeyPress(Driver,"MOVELEFT")
            D = KeyPress(Driver,"MOVERIGHT")
            
            SPACE = KeyPress(Driver,"JUMP")
            SHIFT = KeyPress(Driver,"SPEED")
            ALT = KeyPress(Driver,"WALK")
            CTRL = KeyPress(Driver,"DUCK")
            
            HitboxPhys:addVelocity(Vector(W-S,(A-D)/5,(SPACE-CTRL)):getRotated(Hitbox:getAngles())*50-(HitboxPhys:getVelocity()/30)+(Vector(0,0,600)*game.getTickInterval()))
            HitboxPhys:addAngleVelocity(-(Hitbox:getAngles()-DriverEyeAng:setP(0):setR(0)+Angle(math.abs(HitboxPhys:getAngleVelocity().z/35),0,HitboxPhys:getAngleVelocity().z/15) ):getQuaternion():getRotationVector()-(Hitbox:getAngleVelocity()/5 ) )
            
            if Trace.Fraction < 1 or SHIFT == 1 then
                HitboxPhys:addVelocity(Vector(0,0,50-(100*Trace.Fraction)))
            end
            if ALT == 1 then
                Seat:ejectDriver()
            end
        end
        
        if coroutine.status(holocreate) == "suspended" then
            coroutine.resume(holocreate)
        end
        HoverSound:setPitch(50+(Hitbox:getVelocity():setZ(0):getLength()/10))
        
    end)
    
end


if CLIENT then
    
    if hasPermission("enablehud") then
        enableHud(player(),true)
    end
    
    net.receive("Send",function()
        seat = net.readEntity()
    end)
    
    hook.add("calcview", "view calc", function()
        if isValid(seat) then
            driver = seat:getDriver()
            isDriver = player()==driver
        else
            isDriver = false
        end
        
        if isDriver then
            rotatevec = seat:getPos()+Vector(-100,0,50):getRotated(eyeAngles())
            
            local view = {
                origin = rotatevec,
                angles = driver:getEyeAngles(),
                drawviewer = true
            }
            
            return view
            
        end
            
    end)
    
end